#include "Ве_крест_крест.h"
#include <sstream>
#include <vector>
#include <unordered_map>
#include <string>

#define красный "red"
#define синий "blue"
#define зеленый "green"
#define полк Русь::vector
#define молва_букв Русь::istringstream
#define преобразовать_буковку_в_целену Русь::stoi
#define достать_букву substr
#define неупорядоченная_карта Русь::unordered_map
#define чудо auto
#define добавить_в_конец push_back

полк<много_букав> РазделитьБуквы(приказ_княжий много_букав& буквы, буква разделитель) {
    полк<много_букав> сущности;
    много_букав сущность;
    молва_букв буковки_в_молве(буквы);
    покуда (Русь::зачерпнуть(буковки_в_молве, сущность, разделитель)) {
        сущности.добавить_в_конец(сущность);
    }
    воздать сущности;
}

розсуд ВозможнаЛиИгра(приказ_княжий полк<много_букав>& игровые_ходы) {
    неупорядоченная_карта<много_букав, целина> количесто_кубиков = {{красный, десятичок + полушка}, {зеленый, десятичок + четвертушка}, {синий, десятичок + осьмушка}};
    для (чудо &игровой_ход : игровые_ходы) {
        полк<много_букав> информация_о_кубах = РазделитьБуквы(игровой_ход, ',');
        для (чудо &информация_о_кубе : информация_о_кубах) {
            целина количество_кубиков;
            много_букав цвет_кубиков;
            молва_букв буковки_в_молве(информация_о_кубе);
            буковки_в_молве >> количество_кубиков >> цвет_кубиков;
            коли (количество_кубиков > количесто_кубиков[цвет_кубиков]) {
                воздать кривда;
            }
        }
    }
    воздать правда;
}

долговязый ПолученикСилыИгры(приказ_княжий полк<много_букав>& игровые_ходы) {
    неупорядоченная_карта<много_букав, долговязый> количесто_кубиков = {{красный, ноль}, {зеленый, ноль}, {синий, ноль}};
    для (auto &игровой_ход : игровые_ходы) {
        полк<много_букав> информация_о_кубах = РазделитьБуквы(игровой_ход, ',');
        для (auto &информация_о_кубе : информация_о_кубах) {
            целина количество_кубиков;
            много_букав цвет_кубиков;
            молва_букв буковки_в_молве(информация_о_кубе);
            буковки_в_молве >> количество_кубиков >> цвет_кубиков;
            коли (количество_кубиков > количесто_кубиков[цвет_кубиков]) {
                количесто_кубиков[цвет_кубиков] = количество_кубиков;
            }
        }
    }
    воздать количесто_кубиков[красный] * количесто_кубиков[зеленый] * количесто_кубиков[синий];
}

царь_батюшка_главный() {
    вперёд_славяне;
    Русь::читать_летопись летопись("1.txt");
    много_букав буквы;
    целина сумма_индентификаторов_возможных_игр = ноль;
    долговязый сумма_мощнотей_всех_игр = ноль;

    коли (летопись.is_open()) {
        покуда (Русь::зачерпнуть(летопись, буквы)) {
            полк<много_букав> данные_игры = РазделитьБуквы(буквы, ':');
            полк<много_букав> игровые_ходы = РазделитьБуквы(данные_игры[целковый], ';');

            коли (ВозможнаЛиИгра(игровые_ходы)) {
                сумма_индентификаторов_возможных_игр += преобразовать_буковку_в_целену(данные_игры[ноль].достать_букву(пудовичок));
            }
            сумма_мощнотей_всех_игр += ПолученикСилыИгры(игровые_ходы);
        }
        летопись.закупорить();
    } отнюдь {
        Русь::молвить << "Не удалось открыть файл" << Русь::прыг_скок;
        воздать целковый;
    }

    Русь::молвить << "Сумма индентификаторо возможных игр: " << сумма_индентификаторов_возможных_игр << Русь::прыг_скок;
    Русь::молвить << "Сумма мощнотей всех игор: " << сумма_мощнотей_всех_игр << Русь::прыг_скок;

    воздать ноль;
}